Event: An event is "any action or occurence that software can recognize", such as when a button is pushed, when a user submits form data, or when an error is thrown by the code.

Error: An error is an event that occurs when a piece of code cannot be executed. For example, calling a variable that has not been declared, a script that does not exist because of a typo in the filepath, or an unexpected token, such as a ',' or '.' appearing where they're not needed.
Example:
.toString() without an object
sayHello(becca) when becca has not been declared

Errors you may not notice are type coercions, when javascript converts the type of a variable or value to another type in order to make a comparison or operation possible.

    "3" + 3
    >> "33"

    true + true
    >> 2

For javascript, errors will appear in the console.

Scope: The block of code where your data is available. For example, in the whole of your program, your functions are global scope becauses they can be called from anywhere in your code, unless declared inside a function or object. Variables and functions declared outside of any function or object will naturally have global scope and can be called on or changed (if using let) anywhere in your program. All other variables have local scope.

Local scope is local to a function or object. For instance, a method declared in an object cannot be accessed without referring the object unless the object is global like window and document.

    window.alert() has global scope. It can be used anywhere in a program.

    The scope of dog.bark() is limited to wherever the object, dog, can be called. If dog is declared in the function, sendDog(), dog cannot be called outside this function.

If you call a function, object or variable in another function or object, unless passed or declared, you will get an error that what you're calling is undefined.

WHY DO WE HAVE SCOPE?

Scope allows us to limit where functions, objects and variables can be called. With a limited scope, we can lessen the factors when an area occurs. Instead of looking at the global scope, we can focus on the scope of any function, object or variable, and backtrack through our statements and called functions to find out where to find the source or cause of an error.

ACCESSING THE DOM

Javascript allows us 